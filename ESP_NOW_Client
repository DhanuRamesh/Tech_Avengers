//////////////////////////////////////Hare krishna
//ESP-32-s3-pico
#include <esp_now.h>
#include <WiFi.h>
#include <ESP32Servo.h>

Servo bow1;
Servo bow2;
Servo bow3;

#define en1 13
#define en2 17
#define in1 14
#define in2 15
#define in3 16
#define in4 11


// Structure example to receive data
// Must match the sender structure
typedef struct struct_message {
  int XjoyAval;
  int YjoyAval;
  int XjoyBval;
  int YjoyBval;
  int Potval;
  int ButtonAval;
  int ButtonBval;
  int ButtonCval;
  int ButtonDval;
} struct_message;

int XjoyAstate;
int YjoyAstate;
int XjoyBstate;
int YjoyBstate;
int Potstate;
int ButtonAstate;
int ButtonBstate;
int ButtonCstate;
int ButtonDstate;

// Create a struct_message called myData
struct_message readingData;

// callback function that will be executed when data is received
void OnDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len) {
  memcpy(&readingData, incomingData, sizeof(readingData));
  //Serial.print("Bytes received: ");
  //Serial.println(len);

  XjoyAstate = readingData.XjoyAval;
  Serial.print("XjoyA: ");
  Serial.println(readingData.XjoyAval);
  Serial.println();
  YjoyAstate = readingData.YjoyAval;
  Serial.print("YjoyA: ");
  Serial.println(readingData.YjoyAval);
  Serial.println();
  bow1.write(YjoyAstate);

  XjoyBstate = readingData.XjoyBval;
  Serial.print("XjoyB: ");
  Serial.println(readingData.XjoyBval);
  Serial.println();
  bow2.write(XjoyBstate);

  YjoyBstate = readingData.YjoyBval;
  Serial.print("YjoyB: ");
  Serial.println(readingData.YjoyBval);
  Serial.println();

  Potstate = readingData.Potval;
  bow3.write(Potstate);
  Serial.print("Pot: ");
  Serial.println(readingData.Potval);
  Serial.println("Pot Angle: ");
  //Serial.print(Potstate);

  ButtonAstate = readingData.ButtonAval;
  //bow2.write(ButtonAstate);
  Serial.print("ButtonA: ");
  Serial.println(readingData.ButtonAval);
  //Serial.println();

  ButtonBstate = readingData.ButtonBval;
  //bow2.write(ButtonBstate);
  //Serial.print("ButtonB: ");
  //Serial.println(readingData.ButtonBval);
  //Serial.println();

  ButtonCstate = readingData.ButtonCval;
  //bow1.write(ButtonCstate);
  //Serial.print("ButtonC: ");
  //Serial.println(readingData.ButtonCval);
  //Serial.println();
  //bow3.write(ButtonCstate);
  /*
  while(digitalRead(ButtonCstate) == LOW){

    if (angle2 > 0 && angle2 <= 180) {
      angle2 = angle2 - angle2Step;
       if(angle2 < 0){
        angle2 = 0;
       }else{
      bow3.write(angle2); // move the servo to desired angle
      Serial.print("Moved to: ");
      Serial.print(angle2);   // print the angle
      Serial.println(" degree");
       }
    }
    
  delay(100); // waits for the servo to get there
  }
*/
  ButtonDstate = readingData.ButtonDval;
  //Serial.print("ButtonD: ");
  //Serial.println(readingData.ButtonDval);
  //Serial.println();
  //bow1.write(ButtonDstate);
}

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);
  pinMode(en1, OUTPUT);
  pinMode(en2, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  bow1.attach(35);
  bow2.attach(36);
  bow3.attach(37);
  bow2.write(90);
  bow1.write(135);
  bow3.write(0);
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_register_recv_cb(OnDataRecv);
}

void loop() {
  if (YjoyBstate > 130) {
    //Forward
    digitalWrite(in1, 1);
    digitalWrite(in2, 0);
    digitalWrite(in3, 1);
    digitalWrite(in4, 0);
    int speed1 = map(YjoyBstate, 130, 255, 0, 255);
    analogWrite(en1, speed1);
    analogWrite(en2, speed1);
    //Serial.print("Speed: ");
    //Serial.print(speed1);
    //Serial.println();
  } else if (YjoyBstate < 115) {
    //Backward
    digitalWrite(in1, 0);
    digitalWrite(in2, 1);
    digitalWrite(in3, 0);
    digitalWrite(in4, 1);
    int speed2 = map(YjoyBstate, 115, 0, 0, 255);
    analogWrite(en1, speed2);
    analogWrite(en2, speed2);
  } else if (XjoyAstate > 130) {
    //Right
    digitalWrite(in1, 1);
    digitalWrite(in2, 0);
    digitalWrite(in3, 0);
    digitalWrite(in4, 1);
    int speed3 = map(XjoyAstate, 120, 255, 0, 255);
    analogWrite(en1, speed3);
    analogWrite(en2, speed3);
  } else if (XjoyAstate < 110) {
    //left
    digitalWrite(in1, 0);
    digitalWrite(in2, 1);
    digitalWrite(in3, 1);
    digitalWrite(in4, 0);
    int speed4 = map(XjoyAstate, 120, 0, 0, 255);
    analogWrite(en1, speed4);
    analogWrite(en2, speed4);
  } else {
    digitalWrite(in1, 0);
    digitalWrite(in2, 0);
    digitalWrite(in3, 0);
    digitalWrite(in4, 0);
  }

  /*

  while (digitalRead(ButtonAstate) == LOW) {

    if (angle1 > 0 && angle1 <= 180) {
      angle1 = angle1 - angle1Step;
      if (angle1 < 0) {
        angle1 = 0;
      } else {
        bow1.write(angle1);  // move the servo to desired angle
        Serial.print("Moved to: ");
        Serial.print(angle1);  // print the angle
        Serial.println(" degree");
      }
    }
    //delay(100); // waits for the servo to get there
  }
  while (digitalRead(ButtonBstate) == LOW) {

    if (angle1 >= 0 && angle1 <= 180) {
      angle1 = angle1 + angle1Step;
      if (angle1 > 180) {
        angle1 = 180;
      } else {
        bow1.write(angle1);  // move the servo to desired angle
        Serial.print("Moved to: ");
        Serial.print(angle1);  // print the angle
        Serial.println(" degree");
      }
    }
    //delay(100);  // waits for the servo to get there
  }
    while(digitalRead(ButtonDstate) == LOW){

    if (angle2 >= 0 && angle2 <= 180) {
      angle2 = angle2 + angle2Step;
      if(angle2 >180){
        angle2 =180;
       }else{
      bow3.write(angle2); // move the servo to desired angle
      Serial.print("Moved to: ");
      Serial.print(angle2);   // print the angle
      Serial.println(" degree");
       }
    }
}
*/
}
