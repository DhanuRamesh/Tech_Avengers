/////////////////////////////////////////Hare krishna
#include <esp_now.h>
#include <WiFi.h>

#define XjoyA D1
#define YjoyA D0
#define XjoyB D3
#define YjoyB D2
#define Pot D4
#define ButtonA D5
#define ButtonB D6
#define ButtonC D7
#define ButtonD D8

int XjoyAstate;
int YjoyAstate;
int XjoyBstate;
int YjoyBstate;
int Potstate;
int ButtonAstate;
int ButtonBstate;
int ButtonCstate;
int ButtonDstate;

int angle1 = 90;
int angle1Step = 5;

int angle2 = 90;
int angle2Step = 5;

uint8_t broadcastAddress[] = { 0x7C, 0xDF, 0xA1, 0xEE, 0xDA, 0x3C };
//34:85:18:7B:75:AC----------Arduino_Nano_ESP32-S3
//7C:DF:A1:EE:DA:3C----------Waveshare_ESP32-S3
//EC:DA:3B:BE:7A:E8----------XIAO_ESP32 C3
//FC:F5:C4:A2:BF:34----------ESP8266
//E4:65:B8:28:9A:60----------ESP32
// Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
  int XjoyAval;
  int YjoyAval;
  int XjoyBval;
  int YjoyBval;
  int Potval;
  int ButtonAval;
  int ButtonBval;
  int ButtonCval;
  int ButtonDval;
} struct_message;

// Create a struct_message called myData
struct_message transmitterdata;

esp_now_peer_info_t peerInfo;

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void setup() {
  Serial.begin(115200);
  pinMode(XjoyA, INPUT);
  pinMode(YjoyA, INPUT);
  pinMode(XjoyB, INPUT);
  pinMode(YjoyB, INPUT);
  pinMode(Pot, INPUT);
  pinMode(ButtonA, INPUT_PULLUP);
  pinMode(ButtonB, INPUT_PULLUP);
  pinMode(ButtonC, INPUT_PULLUP);
  pinMode(ButtonD, INPUT_PULLUP);
  pinMode(LED_BUILTIN, OUTPUT);
  Notification();

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    digitalWrite(LED_BUILTIN, HIGH);
    return;
  }
  esp_now_register_send_cb(OnDataSent);

  // Register peer
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  // Add peer
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
}

void loop() {
  // Set values to send
  XjoyAstate = analogRead(XjoyA);
  XjoyAstate = map(XjoyAstate, 0, 4095, 0, 255);
  transmitterdata.XjoyAval = XjoyAstate;
  YjoyAstate = analogRead(YjoyA);
  YjoyAstate = map(YjoyAstate, 0, 4095, 90, 180);
  transmitterdata.YjoyAval = YjoyAstate;
  XjoyBstate = analogRead(XjoyB);
  XjoyBstate = map(XjoyBstate, 0, 4095, 180, 0);
  transmitterdata.XjoyBval = XjoyBstate;
  YjoyBstate = analogRead(YjoyB);
  YjoyBstate = map(YjoyBstate, 0, 4095, 0, 255);
  transmitterdata.YjoyBval = YjoyBstate;
  Potstate = analogRead(Pot);
  Potstate = map(Potstate, 0, 4095, 0, 45);
  transmitterdata.Potval = Potstate;

  ButtonAstate = digitalRead(ButtonA);
  if (digitalRead(ButtonAstate) == LOW) {

    if (angle1 > 0 && angle1 <= 180) {
      angle1 = angle1 - angle1Step;
      if (angle1 < 0) {
        angle1 = 0;
      }
    }
  }
  transmitterdata.ButtonAval = angle1;

  ButtonBstate = digitalRead(ButtonB);
  if (digitalRead(ButtonBstate) == LOW) {

    if (angle1 >= 0 && angle1 <= 180) {
      angle1 = angle1 + angle1Step;
      if (angle1 > 180) {
        angle1 = 180;
      }
    }
  }
  transmitterdata.ButtonBval = angle1;

  ButtonCstate = digitalRead(ButtonC);
  if (digitalRead(ButtonCstate) == LOW) {

    if (angle2 > 0 && angle2 <= 180) {
      angle2 = angle2 - angle2Step;
      if (angle2 < 0) {
        angle2 = 0;
      }
    }
  }
  transmitterdata.ButtonCval = angle2;

  //transmitterdata.ButtonCval = ButtonCstate;

  ButtonDstate = digitalRead(ButtonD);
  if (digitalRead(ButtonDstate) == LOW) {

    if (angle2 >= 0 && angle2 <= 180) {
      angle2 = angle2 + angle2Step;
      if (angle2 > 180) {
        angle2 = 180;
      }
    }
  }
  transmitterdata.ButtonDval = angle2;

  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&transmitterdata, sizeof(transmitterdata));

  if (result == ESP_OK) {
    Serial.println("Sent with success");
  } else {
    Serial.println("Error sending the data");
  }
  delay(50);
}
void Notification() {
  digitalWrite(LED_BUILTIN, HIGH);
  delay(1000);
  digitalWrite(LED_BUILTIN, LOW);
  delay(1000);
}
